$date
	Thu Jun 16 14:04:52 2022
$end
$version
	Icarus Verilog
$end
$timescale
	100ns
$end
$scope module Register_tb $end
$var wire 32 ! _outputData2 [31:0] $end
$var wire 32 " _outputData1 [31:0] $end
$var reg 3 # _dirrInput [2:0] $end
$var reg 3 $ _dirrOutput1 [2:0] $end
$var reg 3 % _dirrOutput2 [2:0] $end
$var reg 1 & _enableWrite $end
$var reg 32 ' _inputData [31:0] $end
$scope module registro $end
$var wire 3 ( dirrInput [2:0] $end
$var wire 3 ) dirrOutput1 [2:0] $end
$var wire 3 * dirrOutput2 [2:0] $end
$var wire 32 + inputData [31:0] $end
$var wire 1 & write_en $end
$var reg 32 , R0 [31:0] $end
$var reg 32 - R1 [31:0] $end
$var reg 32 . R2 [31:0] $end
$var reg 32 / R3 [31:0] $end
$var reg 32 0 R4 [31:0] $end
$var reg 32 1 R5 [31:0] $end
$var reg 32 2 R6 [31:0] $end
$var reg 32 3 R7 [31:0] $end
$var reg 32 4 outputData1 [31:0] $end
$var reg 32 5 outputData2 [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
x&
bx %
bx $
bx #
bx "
bx !
$end
#10
1&
#20
b10101100111011011100101011111110 ,
b0 #
b0 (
b10101100111011011100101011111110 '
b10101100111011011100101011111110 +
#30
b10101100111011011100101011111110 "
b10101100111011011100101011111110 4
b0 $
b0 )
#40
b11011110101011011011111011101111 /
b11 #
b11 (
b11011110101011011011111011101111 '
b11011110101011011011111011101111 +
#50
bx "
bx 4
b10 $
b10 )
#60
b11011110101011011011111011101111 3
b111 #
b111 (
#70
b11011110101011011011111011101111 !
b11011110101011011011111011101111 5
b11011110101011011011111011101111 "
b11011110101011011011111011101111 4
b11 %
b11 *
b111 $
b111 )
#80
0&
#90
b11111111111111111111111111111111 '
b11111111111111111111111111111111 +
#100
b10101100111011011100101011111110 "
b10101100111011011100101011111110 4
b0 $
b0 )
#110
